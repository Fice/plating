/*
 * Copyright (2021) by Marcel Lambert.
 * This project is dual licensed under either MIT or Apache-2.0.
 */

use proc_macro::TokenStream;
use quote::quote;
use syn::parse::{Parse, ParseStream};
use syn::{parse_macro_input, Attribute, Generics, Ident, Token, TypeTraitObject, Visibility};

use crate::utils::{available_name, has_name};

struct MarkerData {
    attrs: Vec<Attribute>,
    vis: Visibility,
    name: Ident,
    type_params: Generics,
    trait_type: TypeTraitObject,
}
impl Parse for MarkerData {
    fn parse(input: ParseStream) -> syn::Result<Self> {
        let attrs = input.call(Attribute::parse_outer)?;

        let vis = input.parse()?;
        input.parse::<Token![type]>()?;

        let name = input.parse()?;

        let type_params = input.parse()?;

        input.parse::<Token![:]>()?;

        let trait_type = input.parse()?;

        input.parse::<Token![;]>()?;

        Ok(MarkerData {
            attrs,
            vis,
            name,
            type_params,
            trait_type,
        })
    }
}


pub fn marker(input: TokenStream) -> TokenStream {
    let MarkerData {
        attrs,
        vis,
        name,
        type_params,
        trait_type,
    } = parse_macro_input!(input as MarkerData);

    let has_trait = has_name(&name);
    let available_trait = available_name(&name);

    let has_docs = [
        &format! {"Systems that support a {} should implement this trait.", name},
        "",
        &format! {"Only Systems whose SystemDefinition implements [`{}`] can implement this trait.", available_trait},
        "",
        "This trait is autogenerated by the [`marker`] macro",
    ];
    let available_docs = [
        &format! {"System Definitions need to implement this to signify the System supports a {}", name},
        "",
        &format! {"A system can only implement {} if the corresponding System implements this trait.", has_trait},
        "",
        "This trait is autogenerated by the [`marker`] macro",
    ];

    TokenStream::from(quote! {

        #(#[doc=#has_docs])*
        #vis trait #has_trait
        where
            Self: System,
            <Self as System>::Definition: #available_trait {
            #(#attrs)*
            type #name#type_params: #trait_type;
        }

        #(#[doc=#available_docs])*
        #vis trait #available_trait {}

        #[automatically_derived]
        #[allow(unused_qualifications)]
        impl<Sys> #available_trait for Tag<Sys>
        where
            Sys: SystemsList + SystemDefinition + #available_trait
        {}
        #[automatically_derived]
        #[allow(unused_qualifications)]
        impl<Head, Tail> #available_trait for (Head, Tail) where
            Head: SystemDefinition + #available_trait,
            Tail: #available_trait + SystemDefinition + SystemsList,
        {}
        #[automatically_derived]
        #[allow(unused_qualifications)]
        impl<Head> #available_trait for (Head, ()) where
            Head: SystemDefinition + #available_trait
        {}

    })
}
